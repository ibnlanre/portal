import { useEffect, useState } from "react";

function signal<T>(initialValue: T) {
  return new Signal(initialValue);
}

const number = signal(1);

export function Computed() {
  const computed = signal(number.current * 2);
  return (
    <div className='App'>{computed.value}</div>
  )
}

export function App(props) {
  return (
    <div className='App'>
      <h1>Hello React.</h1>
      <h2>Start editing to {number.current}</h2>

      <button onClick={() => {
        number.value++
      }}>Click me!</button>
    </div>
  );
}


const count = signal(0);
const peek = signal(count.value + 2);
const sideEffect = (value: number) => {
  console.log("count", value);
};

function Counter() {
  const double = signal(count.current * 3);
  const dispose = count.subscribe(sideEffect);

  return (
    <div className="text-white">
      <p>No Reactivity: value + 2 = {peek.value}</p>
      <button onClick={() => count.value++}>
        Value: {count.value}, value x 3 = {double.value}
      </button>
    </div>
  );
}

function Morphine(props: { count: number; onClick?: () => void }) {
  return (
    <button className="text-white" onClick={props.onClick}>
      {props.count}
    </button>
  );
}

<Counter />
<Morphine count={count.current} onClick={() => count.value++} />




------------------

import { signal } from "@ibnlanre/portal";

// this could equally be defined inside the component
const count = signal(0);
const sideEffect = (value) => {
  console.log("count", value);
};

// if defined within the Counter component
// peek.value would be updated when count changes
// because count.current causes a re-render
const peek = signal(count.value + 2);

function Counter() {
  // .current makes the value reactive, .value does not
  // but re-renders can make .value seem reactive
	const double = signal(count.current * 3);

  // subscriptions can happen within the component
  // because the callback is defined outside it
  const dispose = count.subscribe(sideEffect);

	return (
    <div>
      <p>No change: value + 2 = {peek.value}</p>
  		<button onClick={() => count.value++}>
			  Value: {count.value}, value x 3 = {double.value}
		  </button>
    </div>
	);
}
